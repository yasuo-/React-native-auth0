/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import React from 'react';
import { ViewProps } from 'react-native';
import { ModalPresentingBased } from '../support/typings';
export declare const baseModalTestId: string;
declare type ChildElement = React.ReactElement<any>;
declare type ChildrenProp = ChildElement | ChildElement[];
export interface BackdropStyle {
    backgroundColor: string;
    opacity: number;
}
interface ComponentProps {
    visible: boolean;
    children: ChildrenProp;
    backdropStyle?: BackdropStyle;
}
export declare type ModalProps = ViewProps & ComponentProps & ModalPresentingBased;
/**
 * Modal component is a wrapper than presents content above an enclosing view.
 *
 * @extends React.Component
 *
 * @property {boolean} visible - Determines whether component is visible. By default is false.
 *
 * @property {React.ReactElement<any> | React.ReactElement<any>[]} children -
 * Determines component's children.
 *
 * @property {boolean} allowBackdrop - Determines whether user can tap on back-drop.
 * Default is `false`.
 *
 * @property {{backgroundColor: string, opacity: number }} backdropStyle - Determines the style of backdrop.
 *
 * @property {() => void} onBackdropPress - Determines component's behavior when the user is
 * tapping on back-drop.
 *
 * @property ViewProps
 *
 * @example Modal usage and API example
 *
 * ```
 * import { Modal } from 'react-native-ui-kitten';
 *
 * state: State = {
 *   visible: false,
 * };
 *
 * private setVisible = (visible: boolean): void => {
 *   this.setState({ visible });
 * };
 *
 * public render(): React.ReactNode {
 *   return (
 *     <View>
 *       <Button title='Show Modal' onPress={() => this.setVisible(true)}/>
 *       <Modal
 *         visible={this.state.visible}
 *         allowBackdrop={false}>
 *         <View>
 *           <Text>Hi! This is Modal Component!</Test>
 *           <Button title='Close Modal' onPress={() => this.setVisible(false)}/>
 *         <View/>
 *       </Modal>
 *     </View>
 *   )
 * }
 * ```
 * */
export declare class Modal extends React.Component<ModalProps> {
    static defaultProps: Partial<ModalProps>;
    private contentSize;
    private id;
    componentWillReceiveProps(nextProps: ModalProps): void;
    private handleVisibility;
    private getAbsoluteRelatedStyle;
    private onMeasure;
    private renderBaseModal;
    private renderModal;
    private renderMeasureNode;
    render(): React.ReactNode;
}
export {};
