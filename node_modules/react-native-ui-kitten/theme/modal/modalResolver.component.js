/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { View, StyleSheet, TouchableOpacity, } from 'react-native';
export class ModalResolver extends React.Component {
    constructor() {
        super(...arguments);
        this.onBackdropPress = () => {
            const { allowBackdrop, onBackdropPress } = this.props;
            if (allowBackdrop) {
                onBackdropPress();
            }
        };
        this.onStartShouldSetResponder = () => {
            return true;
        };
        this.onResponderRelease = () => {
            return;
        };
        this.onStartShouldSetResponderCapture = () => {
            return false;
        };
        this.renderComponentChild = (source) => {
            return React.cloneElement(source, {
                style: [source.props.style, this.props.style],
            });
        };
        this.renderComponentChildren = (source) => {
            return React.Children.map(source, this.renderComponentChild);
        };
        this.renderWithBackDrop = (component) => {
            return (<TouchableOpacity style={styles.container} onPress={this.onBackdropPress} activeOpacity={1}>
        {component}
      </TouchableOpacity>);
        };
        this.renderWithoutBackDrop = (component) => {
            return (<View style={styles.notVisibleWrapper}>
        <View style={styles.container} pointerEvents='none'/>
        {component}
      </View>);
        };
        this.renderComponent = () => {
            const _a = this.props, { children, allowBackdrop } = _a, derivedProps = __rest(_a, ["children", "allowBackdrop"]);
            const componentChildren = this.renderComponentChildren(children);
            const dialog = <View {...derivedProps} style={styles.contentWrapper} onStartShouldSetResponder={this.onStartShouldSetResponder} onResponderRelease={this.onResponderRelease} onStartShouldSetResponderCapture={this.onStartShouldSetResponderCapture} pointerEvents='box-none'>
        {componentChildren}
      </View>;
            return allowBackdrop ?
                this.renderWithBackDrop(dialog) : this.renderWithoutBackDrop(dialog);
        };
    }
    render() {
        return this.props.visible ? this.renderComponent() : null;
    }
}
ModalResolver.defaultProps = {
    visible: false,
};
const styles = StyleSheet.create({
    container: StyleSheet.absoluteFillObject,
    notVisibleWrapper: {
        position: 'absolute',
        width: 0,
        height: 0,
    },
    contentWrapper: {
        alignSelf: 'flex-start',
    },
});
//# sourceMappingURL=modalResolver.component.js.map